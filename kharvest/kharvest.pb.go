// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kharvest.proto

/*
Package kharvest is a generated protocol buffer package.

It is generated from these files:
	kharvest.proto

It has these top-level messages:
	KeysReply
	DataSignature
	NotifyReply
	Data
	StoreReply
*/
package kharvest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NotifyReply_Action int32

const (
	NotifyReply_ACK             NotifyReply_Action = 0
	NotifyReply_STORE_REQUESTED NotifyReply_Action = 1
)

var NotifyReply_Action_name = map[int32]string{
	0: "ACK",
	1: "STORE_REQUESTED",
}
var NotifyReply_Action_value = map[string]int32{
	"ACK":             0,
	"STORE_REQUESTED": 1,
}

func (x NotifyReply_Action) String() string {
	return proto.EnumName(NotifyReply_Action_name, int32(x))
}
func (NotifyReply_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type StoreReply_Action int32

const (
	StoreReply_STORED StoreReply_Action = 0
	StoreReply_ERROR  StoreReply_Action = 1
)

var StoreReply_Action_name = map[int32]string{
	0: "STORED",
	1: "ERROR",
}
var StoreReply_Action_value = map[string]int32{
	"STORED": 0,
	"ERROR":  1,
}

func (x StoreReply_Action) String() string {
	return proto.EnumName(StoreReply_Action_name, int32(x))
}
func (StoreReply_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type KeysReply struct {
	Keys []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *KeysReply) Reset()                    { *m = KeysReply{} }
func (m *KeysReply) String() string            { return proto.CompactTextString(m) }
func (*KeysReply) ProtoMessage()               {}
func (*KeysReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KeysReply) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

// The request message containing the user's name.
type DataSignature struct {
	Filename  string                      `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Md5       string                      `protobuf:"bytes,3,opt,name=md5" json:"md5,omitempty"`
	Namespace string                      `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	PodName   string                      `protobuf:"bytes,5,opt,name=podName" json:"podName,omitempty"`
	Metadata  map[string]string           `protobuf:"bytes,6,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DataSignature) Reset()                    { *m = DataSignature{} }
func (m *DataSignature) String() string            { return proto.CompactTextString(m) }
func (*DataSignature) ProtoMessage()               {}
func (*DataSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DataSignature) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *DataSignature) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *DataSignature) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *DataSignature) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DataSignature) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *DataSignature) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type NotifyReply struct {
	Action NotifyReply_Action `protobuf:"varint,1,opt,name=action,enum=kharvest.NotifyReply_Action" json:"action,omitempty"`
}

func (m *NotifyReply) Reset()                    { *m = NotifyReply{} }
func (m *NotifyReply) String() string            { return proto.CompactTextString(m) }
func (*NotifyReply) ProtoMessage()               {}
func (*NotifyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NotifyReply) GetAction() NotifyReply_Action {
	if m != nil {
		return m.Action
	}
	return NotifyReply_ACK
}

// The response message containing the greetings
type Data struct {
	Signature *DataSignature `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	Data      []byte         `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Data) GetSignature() *DataSignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// The response message containing the greetings
type StoreReply struct {
}

func (m *StoreReply) Reset()                    { *m = StoreReply{} }
func (m *StoreReply) String() string            { return proto.CompactTextString(m) }
func (*StoreReply) ProtoMessage()               {}
func (*StoreReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*KeysReply)(nil), "kharvest.KeysReply")
	proto.RegisterType((*DataSignature)(nil), "kharvest.DataSignature")
	proto.RegisterType((*NotifyReply)(nil), "kharvest.NotifyReply")
	proto.RegisterType((*Data)(nil), "kharvest.Data")
	proto.RegisterType((*StoreReply)(nil), "kharvest.StoreReply")
	proto.RegisterEnum("kharvest.NotifyReply_Action", NotifyReply_Action_name, NotifyReply_Action_value)
	proto.RegisterEnum("kharvest.StoreReply_Action", StoreReply_Action_name, StoreReply_Action_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Kharvest service

type KharvestClient interface {
	// Sends a greeting
	Notify(ctx context.Context, in *DataSignature, opts ...grpc.CallOption) (*NotifyReply, error)
	Store(ctx context.Context, in *Data, opts ...grpc.CallOption) (*StoreReply, error)
}

type kharvestClient struct {
	cc *grpc.ClientConn
}

func NewKharvestClient(cc *grpc.ClientConn) KharvestClient {
	return &kharvestClient{cc}
}

func (c *kharvestClient) Notify(ctx context.Context, in *DataSignature, opts ...grpc.CallOption) (*NotifyReply, error) {
	out := new(NotifyReply)
	err := grpc.Invoke(ctx, "/kharvest.Kharvest/Notify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kharvestClient) Store(ctx context.Context, in *Data, opts ...grpc.CallOption) (*StoreReply, error) {
	out := new(StoreReply)
	err := grpc.Invoke(ctx, "/kharvest.Kharvest/Store", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Kharvest service

type KharvestServer interface {
	// Sends a greeting
	Notify(context.Context, *DataSignature) (*NotifyReply, error)
	Store(context.Context, *Data) (*StoreReply, error)
}

func RegisterKharvestServer(s *grpc.Server, srv KharvestServer) {
	s.RegisterService(&_Kharvest_serviceDesc, srv)
}

func _Kharvest_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KharvestServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kharvest.Kharvest/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KharvestServer).Notify(ctx, req.(*DataSignature))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kharvest_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KharvestServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kharvest.Kharvest/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KharvestServer).Store(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kharvest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kharvest.Kharvest",
	HandlerType: (*KharvestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _Kharvest_Notify_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _Kharvest_Store_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kharvest.proto",
}

// Client API for KharvestUserAPI service

type KharvestUserAPIClient interface {
	// Keys return the key strings generated from the content of the store
	Keys(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*KeysReply, error)
}

type kharvestUserAPIClient struct {
	cc *grpc.ClientConn
}

func NewKharvestUserAPIClient(cc *grpc.ClientConn) KharvestUserAPIClient {
	return &kharvestUserAPIClient{cc}
}

func (c *kharvestUserAPIClient) Keys(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*KeysReply, error) {
	out := new(KeysReply)
	err := grpc.Invoke(ctx, "/kharvest.KharvestUserAPI/Keys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KharvestUserAPI service

type KharvestUserAPIServer interface {
	// Keys return the key strings generated from the content of the store
	Keys(context.Context, *google_protobuf.Empty) (*KeysReply, error)
}

func RegisterKharvestUserAPIServer(s *grpc.Server, srv KharvestUserAPIServer) {
	s.RegisterService(&_KharvestUserAPI_serviceDesc, srv)
}

func _KharvestUserAPI_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KharvestUserAPIServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kharvest.KharvestUserAPI/Keys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KharvestUserAPIServer).Keys(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _KharvestUserAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kharvest.KharvestUserAPI",
	HandlerType: (*KharvestUserAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Keys",
			Handler:    _KharvestUserAPI_Keys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kharvest.proto",
}

func init() { proto.RegisterFile("kharvest.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x51, 0x6f, 0xd2, 0x50,
	0x14, 0xa6, 0x2b, 0x74, 0xf4, 0x20, 0xac, 0x39, 0x9b, 0x5a, 0xeb, 0x12, 0x48, 0x13, 0x0d, 0x0f,
	0x5a, 0x92, 0x2a, 0xc9, 0x32, 0x9f, 0x98, 0x34, 0xd1, 0x10, 0x37, 0x76, 0x61, 0xcf, 0xe6, 0x0e,
	0x2e, 0xd8, 0xd0, 0xd2, 0xa6, 0xbd, 0x4c, 0xfb, 0xab, 0xfc, 0x8b, 0xe6, 0xde, 0xd2, 0x76, 0xa8,
	0x7b, 0x3b, 0xe7, 0xdc, 0xef, 0x9c, 0xef, 0xfb, 0x4e, 0x4f, 0xa1, 0xb3, 0xf9, 0x41, 0x93, 0x07,
	0x96, 0x72, 0x27, 0x4e, 0x22, 0x1e, 0x61, 0xb3, 0xc8, 0xad, 0xd7, 0xeb, 0x28, 0x5a, 0x07, 0x6c,
	0x20, 0xeb, 0xf7, 0xbb, 0xd5, 0x80, 0x85, 0x31, 0xcf, 0x72, 0x98, 0xd5, 0xfd, 0xfb, 0x91, 0xfb,
	0x21, 0x4b, 0x39, 0x0d, 0xe3, 0x1c, 0x60, 0x77, 0x41, 0x9f, 0xb0, 0x2c, 0x25, 0x2c, 0x0e, 0x32,
	0x44, 0xa8, 0x6f, 0x58, 0x96, 0x9a, 0x4a, 0x4f, 0xed, 0xeb, 0x44, 0xc6, 0xf6, 0xef, 0x23, 0x68,
	0x8f, 0x29, 0xa7, 0x33, 0x7f, 0xbd, 0xa5, 0x7c, 0x97, 0x30, 0xb4, 0xa0, 0xb9, 0xf2, 0x03, 0xb6,
	0xa5, 0x21, 0x33, 0x95, 0x9e, 0xd2, 0xd7, 0x49, 0x99, 0xe3, 0x05, 0xe8, 0x25, 0x83, 0x79, 0xd4,
	0x53, 0xfa, 0x2d, 0xd7, 0x72, 0x72, 0x0d, 0x4e, 0xa1, 0xc1, 0x99, 0x17, 0x08, 0x52, 0x81, 0xd1,
	0x00, 0x35, 0x5c, 0x0e, 0x4d, 0x55, 0x0e, 0x14, 0x21, 0x9e, 0x83, 0x2e, 0x66, 0xa6, 0x31, 0x5d,
	0x30, 0xb3, 0x2e, 0xeb, 0x55, 0x01, 0x4d, 0x38, 0x8e, 0xa3, 0xe5, 0xb5, 0x10, 0xd1, 0x90, 0x6f,
	0x45, 0x8a, 0x23, 0x68, 0x86, 0x8c, 0xd3, 0x25, 0xe5, 0xd4, 0xd4, 0x7a, 0x6a, 0xbf, 0xe5, 0xbe,
	0x71, 0xca, 0xed, 0x1d, 0x58, 0x71, 0xbe, 0xed, 0x71, 0xde, 0x96, 0x27, 0x19, 0x29, 0xdb, 0xac,
	0x4f, 0xd0, 0x3e, 0x78, 0x12, 0xea, 0x36, 0x2c, 0xdb, 0xdb, 0x15, 0x21, 0x9e, 0x41, 0xe3, 0x81,
	0x06, 0x3b, 0x26, 0x5d, 0xea, 0x24, 0x4f, 0x2e, 0x8f, 0x2e, 0x14, 0x7b, 0x03, 0xad, 0xeb, 0x88,
	0xfb, 0xab, 0x2c, 0x5f, 0xea, 0x47, 0xd0, 0xe8, 0x82, 0xfb, 0xd1, 0x56, 0x76, 0x77, 0xdc, 0xf3,
	0x4a, 0xcc, 0x23, 0x98, 0x33, 0x92, 0x18, 0xb2, 0xc7, 0xda, 0x6f, 0x41, 0xcb, 0x2b, 0x78, 0x0c,
	0xea, 0xe8, 0xf3, 0xc4, 0xa8, 0xe1, 0x29, 0x9c, 0xcc, 0xe6, 0x37, 0xc4, 0xfb, 0x4e, 0xbc, 0xdb,
	0x3b, 0x6f, 0x36, 0xf7, 0xc6, 0x86, 0x62, 0xdf, 0x42, 0x5d, 0x58, 0xc2, 0x21, 0xe8, 0x69, 0x61,
	0x4b, 0x12, 0xb5, 0xdc, 0x97, 0x4f, 0xb8, 0x26, 0x15, 0x52, 0x7c, 0x71, 0xb9, 0x27, 0x61, 0xe2,
	0x19, 0x91, 0xb1, 0xfd, 0x1e, 0x60, 0xc6, 0xa3, 0x84, 0x49, 0x5d, 0x76, 0xb7, 0x14, 0x02, 0xa0,
	0x49, 0xfe, 0xb1, 0x51, 0x43, 0x1d, 0x1a, 0x1e, 0x21, 0x37, 0xc4, 0x50, 0xdc, 0x9f, 0xd0, 0x9c,
	0xec, 0x79, 0xf0, 0x12, 0xb4, 0xdc, 0x13, 0x3e, 0x45, 0x6e, 0x3d, 0xff, 0xaf, 0x7d, 0xbb, 0x86,
	0x03, 0x68, 0x48, 0x5a, 0xec, 0x1c, 0xb6, 0x5a, 0x67, 0x55, 0xfe, 0x48, 0x57, 0xcd, 0xfd, 0x02,
	0x27, 0x05, 0xf1, 0x5d, 0xca, 0x92, 0xd1, 0xf4, 0x2b, 0x0e, 0xa1, 0x2e, 0xae, 0x19, 0x5f, 0xfc,
	0x73, 0x73, 0x9e, 0xf8, 0x29, 0xac, 0xd3, 0x6a, 0x54, 0x79, 0xf5, 0x76, 0xed, 0xea, 0x1d, 0xbc,
	0xf2, 0x23, 0x67, 0x9d, 0xc4, 0x0b, 0x87, 0xfd, 0xa2, 0x61, 0x1c, 0xb0, 0xb4, 0x04, 0x5e, 0xb5,
	0x0b, 0x92, 0xa9, 0x98, 0x35, 0x55, 0xee, 0x35, 0x39, 0xf4, 0xc3, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf8, 0xc9, 0xc3, 0xb6, 0x93, 0x03, 0x00, 0x00,
}
